{
  "address": "0x49e5f311E4D274C510c6b73E8CF0243b7F97BED6",
  "abi": [
    {
      "inputs": [],
      "name": "GameOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSelection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourTurn",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "teamOne",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "teamTwo",
          "type": "address"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "GameFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "team",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "column",
          "type": "uint8"
        }
      ],
      "name": "TurnTaken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "opponent",
          "type": "address"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "internalType": "address",
          "name": "teamOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "teamTwo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "turn",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_gameId",
          "type": "uint8"
        }
      ],
      "name": "getGameBoard",
      "outputs": [
        {
          "internalType": "uint8[7][6]",
          "name": "",
          "type": "uint8[7][6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getGameIdFromAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_column",
          "type": "uint8"
        }
      ],
      "name": "makeMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_gameId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "column",
          "type": "uint8"
        }
      ],
      "name": "makeMoveById",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5924d7a3b939cf41a48256c07fc6cb06f05b6f9147c6f8b6e91b17315696809e",
  "receipt": {
    "to": null,
    "from": "0x629750317d320B8bB4d48D345A6d699Cc855c4a6",
    "contractAddress": "0x49e5f311E4D274C510c6b73E8CF0243b7F97BED6",
    "transactionIndex": 54,
    "gasUsed": "963965",
    "logsBloom": "0x
    "blockHash": "0x58f65c471e164fae935a265f1b372a875019575019ff8dd06f6b40a96d6572f1",
    "transactionHash": "0x5924d7a3b939cf41a48256c07fc6cb06f05b6f9147c6f8b6e91b17315696809e",
    "logs": [],
    "blockNumber": 8499210,
    "cumulativeGasUsed": "13253891",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "1bb5f982ccdf01c340ba17cfe441ccdd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"GameOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSelection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourTurn\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamOne\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamTwo\",\"type\":\"address\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"column\",\"type\":\"uint8\"}],\"name\":\"TurnTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"teamOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamTwo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"turn\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameId\",\"type\":\"uint8\"}],\"name\":\"getGameBoard\",\"outputs\":[{\"internalType\":\"uint8[7][6]\",\"name\":\"\",\"type\":\"uint8[7][6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getGameIdFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_column\",\"type\":\"uint8\"}],\"name\":\"makeMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"column\",\"type\":\"uint8\"}],\"name\":\"makeMoveById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"challenge(address)\":{\"details\":\"opponent will go firstgame id is increated each time a new game is createdseason is over when timer (soon to be added) is past\",\"params\":{\"opponent\":\"challened\"}},\"makeMove(uint8)\":{\"params\":{\"_column\":\"selected column for move\"}},\"makeMoveById(uint8,uint8)\":{\"params\":{\"_gameId\":\"id of game\",\"column\":\"selected column for move\"}}},\"stateVariables\":{\"gameId\":{\"details\":\"Initialised at 1 because it makes the first transaction slightly cheaper.\"},\"getGame\":{\"details\":\"This automatically generates a getter for us, which will return `Game.player1`, `Game.player2`, `Game.moves`, and `Game.finished` (the arrays are skipped)\"}},\"version\":1},\"userdoc\":{\"errors\":{\"GameOver()\":[{\"notice\":\"revert if game has been completed\"}],\"InvalidSelection()\":[{\"notice\":\"revert if column choice is invalid\"}],\"NotYourTurn()\":[{\"notice\":\"revert if caller isn't current team\"}]},\"events\":{\"GameCreated(uint256,address,address)\":{\"notice\":\"emiited when game is created\"},\"GameFinished(uint256,address)\":{\"notice\":\"emitted when game is complete\"},\"TurnTaken(uint256,address,uint8)\":{\"notice\":\"emitted after turn is successfully taken\"}},\"kind\":\"user\",\"methods\":{\"challenge(address)\":{\"notice\":\"challenge an address to a game of connect four\"},\"gameId()\":{\"notice\":\"Used as a counter for the next game index.\"},\"getGame(uint256)\":{\"notice\":\"An indexed list of games\"},\"getGameIdFromAddress(address)\":{\"notice\":\"An index of address to gameId\"},\"makeMove(uint8)\":{\"notice\":\"caller plays a turn in their current game\"},\"makeMoveById(uint8,uint8)\":{\"notice\":\"current team plays a turn\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConnectFour/ConnectFour.sol\":\"ConnectFour\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ConnectFour/ConnectFour.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\ncontract ConnectFour {\\n    /// @notice revert if caller isn't current team\\n    error NotYourTurn();\\n    /// @notice revert if column choice is invalid\\n    error InvalidSelection();\\n    /// @notice revert if game has been completed\\n    error GameOver();\\n    /// @notice emiited when game is created\\n\\n    event GameCreated(uint gameId, address teamOne, address teamTwo);\\n    /// @notice emitted after turn is successfully taken\\n    event TurnTaken(uint indexed gameId, address team, uint8 column);\\n    /// @notice emitted when game is complete\\n    event GameFinished(uint gameId, address winner);\\n\\n    /// @notice holds game data\\n    /// @param teamOne address of challenger\\n    /// @param teamTwo address of challenged\\n    /// @param winner address of winning team; default: address(0)\\n    /// @param turn current turn is calculated using bitwise for basically odd/even teamOne/teamTwo\\n    /// @param board holds game board data; each 'square' holds current data; 0 = no chip; 1 = team one; 2 = team two\\n    struct Game {\\n        address teamOne;\\n        address teamTwo;\\n        address winner;\\n        uint8 turn;\\n        uint8[7][6] board;\\n    }\\n\\n    /// @notice Used as a counter for the next game index.\\n    /// @dev Initialised at 1 because it makes the first transaction slightly cheaper.\\n    uint public gameId;\\n\\n    /// @notice An indexed list of games\\n    /// @dev This automatically generates a getter for us, which will return `Game.player1`, `Game.player2`, `Game.moves`, and `Game.finished` (the arrays are skipped)\\n    mapping(uint => Game) public getGame;\\n\\n    /// @notice An index of address to gameId\\n    mapping(address => uint) public getGameIdFromAddress;\\n\\n    /// @notice prevent move if column is invalid\\n    modifier validColumn(uint8 column) {\\n        if (column > 6) revert InvalidSelection();\\n        _;\\n    }\\n\\n    /// @notice prevents gameplay if game is over\\n    modifier gameOver(uint _gameId) {\\n        if (getGame[_gameId].winner != address(0)) revert GameOver();\\n        _;\\n    }\\n\\n    /// @notice prevents teams being the same address\\n    modifier uniqueTeams(address opponent) {\\n        require(msg.sender != opponent);\\n        _;\\n    }\\n\\n    /**\\n     * @notice challenge an address to a game of connect four\\n     * @param opponent challened\\n     * @dev opponent will go first\\n     * @dev game id is increated each time a new game is created\\n     * @dev season is over when timer (soon to be added) is past\\n     */\\n    function challenge(address opponent) public uniqueTeams(opponent) {\\n        require(getGameIdFromAddress[msg.sender] == 0, \\\"Already playing.\\\");\\n        require(getGameIdFromAddress[opponent] == 0, \\\"Opponent is already playing.\\\");\\n\\n        uint8[7][6] memory newBoard;\\n        Game memory newGame = Game({\\n            teamOne: msg.sender,\\n            teamTwo: opponent,\\n            turn: uint8(0),\\n            winner: address(0),\\n            board: newBoard\\n        });\\n        getGame[gameId] = newGame;\\n        setGameIdFromAddress(newGame, gameId);\\n\\n        emit GameCreated(gameId, msg.sender, opponent);\\n\\n        gameId++;\\n    }\\n\\n    /**\\n     * @notice current team plays a turn\\n     * @param _gameId id of game\\n     * @param column selected column for move\\n     */\\n    function makeMoveById(\\n        uint8 _gameId,\\n        uint8 column\\n    ) public gameOver(_gameId) validColumn(column) {\\n        Game storage game = getGame[_gameId];\\n\\n        /// @notice row where chip will land\\n        uint8 row;\\n        /// @notice assigned team number for squares\\n        uint8 teamNum = game.turn & 1 == 0 ? 2 : 1;\\n\\n        /// @notice prevents plays being made by other addresses\\n        /// @dev even or odd bitwise operator decides turn\\n        /// @dev starts with team two\\n        if (msg.sender != (game.turn & 1 == 0 ? game.teamTwo : game.teamOne)) {\\n            revert NotYourTurn();\\n        }\\n\\n        /// @notice finds where chip will land\\n        for (uint8 i = 0; i < 7; i++) {\\n            if (i > 5) {\\n                revert InvalidSelection();\\n            }\\n            uint8 square = game.board[i][column];\\n            if (square == 0) {\\n                row = i++;\\n                break;\\n            }\\n        }\\n\\n        /// @notice assigns chip to location onboard\\n        game.board[row][column] = teamNum;\\n        /// @notice increments turn\\n        game.turn++;\\n\\n        emit TurnTaken(_gameId, msg.sender, column);\\n\\n        /// @notice checks surrounding squares for connected pieces\\n        if (didPlayerWin(_gameId, column, row, teamNum)) {\\n            game.winner = msg.sender;\\n            setGameIdFromAddress(game, 0);\\n            emit GameFinished(_gameId, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice caller plays a turn in their current game\\n     * @param _column selected column for move\\n     */\\n    function makeMove(uint8 _column) external {\\n        uint id = getGameIdFromAddress[msg.sender];\\n        require(id != 0, \\\"Not currently playing.\\\");\\n        makeMoveById(uint8(id), _column);\\n    }\\n\\n    function setGameIdFromAddress(Game memory _game, uint _gameId) private {\\n        getGameIdFromAddress[_game.teamOne] = _gameId;\\n        getGameIdFromAddress[_game.teamTwo] = _gameId;\\n    }\\n\\n    /// @notice checks square for team's chip\\n    /// @param _gameId id of game\\n    /// @param firstIndex column selected for new chip\\n    /// @param secondIndex row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkSquare(\\n        uint8 _gameId,\\n        uint8 firstIndex,\\n        uint8 secondIndex,\\n        uint8 teamNum\\n    ) private view returns (bool) {\\n        uint8[7][6] storage board = getGame[_gameId].board;\\n        return board[firstIndex][secondIndex] == teamNum;\\n    }\\n\\n    /// @notice checks the horizontal win\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkHorizonalWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint) {\\n        uint connectedPiecesCount = 1;\\n\\n        /// @dev checks to the right of new piece\\n        for (uint8 i = column + 1; i < 7; i++) {\\n            if (checkSquare(_gameId, row, i, teamNum)) {\\n                connectedPiecesCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n        /// @dev checks to the left of new piece\\n        if (column != 0) {\\n            uint8 columnIndex = column - 1;\\n            while (columnIndex >= 0) {\\n                if (checkSquare(_gameId, row, columnIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (columnIndex == 0) {\\n                    break;\\n                } else {\\n                    columnIndex--;\\n                }\\n            }\\n        }\\n\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks the veritical win\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkVericalWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint) {\\n        uint connectedPiecesCount = 1;\\n\\n        /// @dev checks rows above new piece\\n        for (uint8 i = row + 1; i < 6; i++) {\\n            if (checkSquare(_gameId, i, column, teamNum)) {\\n                connectedPiecesCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n        /// @dev checks rows below new piece\\n        if (row != 0) {\\n            uint8 rowIndex = row - 1;\\n            while (rowIndex >= 0) {\\n                if (checkSquare(_gameId, rowIndex, column, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex == 0) {\\n                    break;\\n                } else {\\n                    rowIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks the forward angle win\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkForwardAngleWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint) {\\n        uint connectedPiecesCount = 1;\\n\\n        /// @dev checks forward angle up\\n        for (uint8 i = row + 1; i < 6 - row; i++) {\\n            if (checkSquare(_gameId, i, i, teamNum)) {\\n                connectedPiecesCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        /// @dev checks forward angle down\\n        if (row != 0 && column != 0) {\\n            uint8 rowIndex = row - 1;\\n            uint8 columnIndex = column - 1;\\n            while (rowIndex >= 0 && columnIndex >= 0) {\\n                if (checkSquare(_gameId, rowIndex, columnIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex == 0 || columnIndex == 0) {\\n                    break;\\n                } else {\\n                    rowIndex--;\\n                    columnIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks the backward angle win\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function checkBackwardAngleWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (uint) {\\n        uint connectedPiecesCount = 1;\\n\\n        /// @dev checks backward angle down\\n        if (row != 0) {\\n            uint8 rowIndex = row - 1;\\n            uint8 columnIndex = column + 1;\\n            while (rowIndex >= 0 && columnIndex < 7) {\\n                if (checkSquare(_gameId, rowIndex, columnIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex == 0 || columnIndex >= 6) {\\n                    break;\\n                } else {\\n                    rowIndex--;\\n                    columnIndex++;\\n                }\\n            }\\n        }\\n\\n        /// @dev checks forward angle down\\n        if (column != 0) {\\n            uint8 rowIndex = row + 1;\\n            uint8 columnIndex = column - 1;\\n            while (rowIndex < 6 && columnIndex >= 0) {\\n                if (checkSquare(_gameId, rowIndex, columnIndex, teamNum)) {\\n                    connectedPiecesCount++;\\n                } else {\\n                    break;\\n                }\\n                if (rowIndex >= 6 || columnIndex == 0) {\\n                    break;\\n                } else {\\n                    rowIndex++;\\n                    columnIndex--;\\n                }\\n            }\\n        }\\n        return connectedPiecesCount;\\n    }\\n\\n    /// @notice checks to see if current play won the game\\n    /// @param _gameId id of game\\n    /// @param column column selected for new chip\\n    /// @param row row where new chip lands\\n    /// @param teamNum number assigned to team\\n    function didPlayerWin(\\n        uint8 _gameId,\\n        uint8 column,\\n        uint8 row,\\n        uint8 teamNum\\n    ) private view returns (bool) {\\n        /// @dev using new chip location as middle == m\\n        /// @dev [ [ C+1 | R-1 ] [  C+1  ] [ C+1 | R+1 ] ]\\n        /// @dev [ [    R-1    ] [ C | R ] [    R+1    ]\\n        /// @dev [ [ C-1 | R-1 ] [  C-1  ] [ C-1 | R+1 ] ]\\n\\n        uint horionalCount = checkHorizonalWin(_gameId, column, row, teamNum);\\n        if (horionalCount == 4) {\\n            return true;\\n        }\\n        uint vericalCount = checkVericalWin(_gameId, column, row, teamNum);\\n        if (vericalCount == 4) {\\n            return true;\\n        }\\n        uint forwardAngleCount = checkForwardAngleWin(\\n            _gameId,\\n            column,\\n            row,\\n            teamNum\\n        );\\n        if (forwardAngleCount == 4) {\\n            return true;\\n        }\\n        uint backwardAngleCount = checkBackwardAngleWin(\\n            _gameId,\\n            column,\\n            row,\\n            teamNum\\n        );\\n        if (backwardAngleCount == 4) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getGameBoard(\\n        uint8 _gameId\\n    ) public view returns (uint8[7][6] memory) {\\n        return getGame[_gameId].board;\\n    }\\n}\\n\",\"keccak256\":\"0x2606b9452287f2aac1c5ad2ae2b5591125411460334c0dee56376b6c077e6a26\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611079806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806372fb97031161005b57806372fb9703146100dd5780639b33b429146100f0578063a2f77bcc14610110578063d7c81b551461018e57600080fd5b806310572ee014610082578063650271d2146100b55780636a37129f146100ca575b600080fd5b6100a2610090366004610e7f565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b6100c86100c3366004610ec5565b610197565b005b6100c86100d8366004610ee0565b610203565b6100c86100eb366004610e7f565b6105d7565b6101036100fe366004610ec5565b6107e6565b6040516100ac9190610f13565b61015b61011e366004610f71565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016100ac565b6100a260005481565b33600090815260026020526040812054908190036101f55760405162461bcd60e51b81526020600482015260166024820152752737ba1031bab93932b73a363c90383630bcb4b7339760511b60448201526064015b60405180910390fd5b6101ff8183610203565b5050565b60ff82166000818152600160205260409020600201546001600160a01b0316156102405760405163df469ccb60e01b815260040160405180910390fd5b8160068160ff16111561026657604051631efccef760e11b815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b9004161561029857600161029b565b60025b6002840154909150600160a01b9004600116156102c25782546001600160a01b03166102d1565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b03161461030257604051631cc191eb60e31b815260040160405180910390fd5b60005b60078160ff1610156103ad5760058160ff16111561033657604051631efccef760e11b815260040160405180910390fd5b6000846003018260ff166006811061035057610350610f8a565b018860ff166007811061036557610365610f8a565b602081049091015460ff601f9092166101000a9004169050600081900361039a578161039081610fb6565b92509350506103ad565b50806103a581610fb6565b915050610305565b5080836003018360ff16600681106103c7576103c7610f8a565b018760ff16600781106103dc576103dc610f8a565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b900490911690601461041d83610fb6565b82546101009290920a60ff818102199093169183160217909155604080513381528983166020820152918a1692507fa6f41f711ea470b4b237d1b3e43b201e53517677308ae067a273fb1948ddbf0c910160405180910390a261048287878484610885565b156105ce57600283018054336001600160a01b03199091168117918290556040805160a08101825286546001600160a01b039081168252600188015416602082015280820192909252600160a01b90920460ff166060820152815160c0810190925261059291859060808301906003830160066000835b8282101561055c576040805160e08101918290529085840190600790826000855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161051a5790505050505050815260200190600101906104f9565b5050509152505080516001600160a01b039081166000908152600260209081526040808320839055930151909116815290812055565b6040805160ff891681523360208201527fb7f35e624e036288272fbf3342c09219261ff29fdddd826989b289134e9ae535910160405180910390a15b50505050505050565b806001600160a01b03811633036105ed57600080fd5b336000908152600260205260409020541561063d5760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90383630bcb4b7339760811b60448201526064016101ec565b6001600160a01b038216600090815260026020526040902054156106a35760405162461bcd60e51b815260206004820152601c60248201527f4f70706f6e656e7420697320616c726561647920706c6179696e672e0000000060448201526064016101ec565b6106ab610d33565b6040805160a0810182523381526001600160a01b038581166020808401918252600084860181815260608601828152608087018981528354845260019485905297909220865181549087166001600160a01b03199182161782559451938101805494871694909516939093179093559151600282018054935160ff16600160a01b026001600160a81b031990941691909416179190911790915591519091829161075b9060038301906006610d60565b50506000805483516001600160a01b0390811683526002602090815260408085208490558187015183168552938490208390558351928352339083015287168183015290517f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e92509081900360600190a16000805490806107db83610fd5565b919050555050505050565b6107ee610d33565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b8282101561087a576040805160e08101918290529085840190600790826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610838579050505050505081526020019060010190610817565b505050509050919050565b60008061089486868686610925565b9050806004036108a857600191505061091d565b60006108b6878787876109e5565b9050806004036108cb5760019250505061091d565b60006108d988888888610a90565b9050806004036108ef576001935050505061091d565b60006108fd89898989610b96565b90508060040361091457600194505050505061091d565b60009450505050505b949350505050565b60006001816109348683610fee565b90505b60078160ff16101561097d5761094f87868387610cc5565b15610966578161095e81610fd5565b92505061096b565b61097d565b8061097581610fb6565b915050610937565b5060ff8516156109dc57600061099460018761100d565b90505b6109a387868387610cc5565b156109ba57816109b281610fd5565b9250506109bf565b6109da565b60ff8116156109da57806109d281611026565b915050610997565b505b95945050505050565b60006001816109f48583610fee565b90505b60068160ff161015610a3d57610a0f87828887610cc5565b15610a265781610a1e81610fd5565b925050610a2b565b610a3d565b80610a3581610fb6565b9150506109f7565b5060ff8416156109dc576000610a5460018661100d565b90505b610a6387828887610cc5565b156109ba5781610a7281610fd5565b92505060ff8116156109da5780610a8881611026565b915050610a57565b6000600181610a9f8583610fee565b90505b610aad85600661100d565b60ff168160ff161015610af457610ac687828387610cc5565b15610add5781610ad581610fd5565b925050610ae2565b610af4565b80610aec81610fb6565b915050610aa2565b5060ff841615801590610b09575060ff851615155b156109dc576000610b1b60018661100d565b90506000610b2a60018861100d565b90505b610b3988838388610cc5565b15610b505782610b4881610fd5565b935050610b55565b610b8a565b60ff82161580610b66575060ff8116155b610b8a5781610b7481611026565b9250508080610b8290611026565b915050610b2d565b50509050949350505050565b6000600160ff841615610c31576000610bb060018661100d565b90506000610bbf876001610fee565b90505b60078160ff161015610c2e57610bda88838388610cc5565b15610bf15782610be981610fd5565b935050610bf6565b610c2e565b60ff82161580610c0a575060068160ff1610155b610c2e5781610c1881611026565b9250508080610c2690610fb6565b915050610bc2565b50505b60ff8516156109dc576000610c47856001610fee565b90506000610c5660018861100d565b90505b60068260ff16108015610c6a575060015b15610b8a57610c7b88838388610cc5565b15610b505782610c8a81610fd5565b93505060068260ff16101580610ca1575060ff8116155b610b8a5781610caf81610fb6565b9250508080610cbd90611026565b915050610c59565b600080600160008760ff16815260200190815260200160002060030190508260ff16818660ff1660068110610cfc57610cfc610f8a565b018560ff1660078110610d1157610d11610f8a565b602081049091015460ff601f9092166101000a90041614915050949350505050565b6040518060c001604052806006905b610d4a610daa565b815260200190600190039081610d425790505090565b8260068101928215610d9a579160200282015b82811115610d9a578251610d8a9083906007610dc8565b5091602001919060010190610d73565b50610da6929150610e57565b5090565b6040518060e001604052806007906020820280368337509192915050565b600183019183908215610e4b5791602002820160005b83821115610e1c57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610dde565b8015610e495782816101000a81549060ff0219169055600101602081600001049283019260010302610e1c565b505b50610da6929150610e6b565b80821115610da65760008155600101610e57565b80821115610da65760008155600101610e57565b600060208284031215610e9157600080fd5b81356001600160a01b0381168114610ea857600080fd5b9392505050565b803560ff81168114610ec057600080fd5b919050565b600060208284031215610ed757600080fd5b610ea882610eaf565b60008060408385031215610ef357600080fd5b610efc83610eaf565b9150610f0a60208401610eaf565b90509250929050565b610540810181836000805b6006811015610f6757825184835b6007811015610f4e57825160ff16825260209283019290910190600101610f2c565b50505060e0939093019260209290920191600101610f1e565b5050505092915050565b600060208284031215610f8357600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103610fcc57610fcc610fa0565b60010192915050565b600060018201610fe757610fe7610fa0565b5060010190565b60ff818116838216019081111561100757611007610fa0565b92915050565b60ff828116828216039081111561100757611007610fa0565b600060ff82168061103957611039610fa0565b600019019291505056fea2646970667358221220c1283337ae4a32c0cdeb6b7daa81c0d957649e9fa82a9988d5ca1c5bda980fe564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806372fb97031161005b57806372fb9703146100dd5780639b33b429146100f0578063a2f77bcc14610110578063d7c81b551461018e57600080fd5b806310572ee014610082578063650271d2146100b55780636a37129f146100ca575b600080fd5b6100a2610090366004610e7f565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b6100c86100c3366004610ec5565b610197565b005b6100c86100d8366004610ee0565b610203565b6100c86100eb366004610e7f565b6105d7565b6101036100fe366004610ec5565b6107e6565b6040516100ac9190610f13565b61015b61011e366004610f71565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016100ac565b6100a260005481565b33600090815260026020526040812054908190036101f55760405162461bcd60e51b81526020600482015260166024820152752737ba1031bab93932b73a363c90383630bcb4b7339760511b60448201526064015b60405180910390fd5b6101ff8183610203565b5050565b60ff82166000818152600160205260409020600201546001600160a01b0316156102405760405163df469ccb60e01b815260040160405180910390fd5b8160068160ff16111561026657604051631efccef760e11b815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b9004161561029857600161029b565b60025b6002840154909150600160a01b9004600116156102c25782546001600160a01b03166102d1565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b03161461030257604051631cc191eb60e31b815260040160405180910390fd5b60005b60078160ff1610156103ad5760058160ff16111561033657604051631efccef760e11b815260040160405180910390fd5b6000846003018260ff166006811061035057610350610f8a565b018860ff166007811061036557610365610f8a565b602081049091015460ff601f9092166101000a9004169050600081900361039a578161039081610fb6565b92509350506103ad565b50806103a581610fb6565b915050610305565b5080836003018360ff16600681106103c7576103c7610f8a565b018760ff16600781106103dc576103dc610f8a565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b900490911690601461041d83610fb6565b82546101009290920a60ff818102199093169183160217909155604080513381528983166020820152918a1692507fa6f41f711ea470b4b237d1b3e43b201e53517677308ae067a273fb1948ddbf0c910160405180910390a261048287878484610885565b156105ce57600283018054336001600160a01b03199091168117918290556040805160a08101825286546001600160a01b039081168252600188015416602082015280820192909252600160a01b90920460ff166060820152815160c0810190925261059291859060808301906003830160066000835b8282101561055c576040805160e08101918290529085840190600790826000855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161051a5790505050505050815260200190600101906104f9565b5050509152505080516001600160a01b039081166000908152600260209081526040808320839055930151909116815290812055565b6040805160ff891681523360208201527fb7f35e624e036288272fbf3342c09219261ff29fdddd826989b289134e9ae535910160405180910390a15b50505050505050565b806001600160a01b03811633036105ed57600080fd5b336000908152600260205260409020541561063d5760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90383630bcb4b7339760811b60448201526064016101ec565b6001600160a01b038216600090815260026020526040902054156106a35760405162461bcd60e51b815260206004820152601c60248201527f4f70706f6e656e7420697320616c726561647920706c6179696e672e0000000060448201526064016101ec565b6106ab610d33565b6040805160a0810182523381526001600160a01b038581166020808401918252600084860181815260608601828152608087018981528354845260019485905297909220865181549087166001600160a01b03199182161782559451938101805494871694909516939093179093559151600282018054935160ff16600160a01b026001600160a81b031990941691909416179190911790915591519091829161075b9060038301906006610d60565b50506000805483516001600160a01b0390811683526002602090815260408085208490558187015183168552938490208390558351928352339083015287168183015290517f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e92509081900360600190a16000805490806107db83610fd5565b919050555050505050565b6107ee610d33565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b8282101561087a576040805160e08101918290529085840190600790826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610838579050505050505081526020019060010190610817565b505050509050919050565b60008061089486868686610925565b9050806004036108a857600191505061091d565b60006108b6878787876109e5565b9050806004036108cb5760019250505061091d565b60006108d988888888610a90565b9050806004036108ef576001935050505061091d565b60006108fd89898989610b96565b90508060040361091457600194505050505061091d565b60009450505050505b949350505050565b60006001816109348683610fee565b90505b60078160ff16101561097d5761094f87868387610cc5565b15610966578161095e81610fd5565b92505061096b565b61097d565b8061097581610fb6565b915050610937565b5060ff8516156109dc57600061099460018761100d565b90505b6109a387868387610cc5565b156109ba57816109b281610fd5565b9250506109bf565b6109da565b60ff8116156109da57806109d281611026565b915050610997565b505b95945050505050565b60006001816109f48583610fee565b90505b60068160ff161015610a3d57610a0f87828887610cc5565b15610a265781610a1e81610fd5565b925050610a2b565b610a3d565b80610a3581610fb6565b9150506109f7565b5060ff8416156109dc576000610a5460018661100d565b90505b610a6387828887610cc5565b156109ba5781610a7281610fd5565b92505060ff8116156109da5780610a8881611026565b915050610a57565b6000600181610a9f8583610fee565b90505b610aad85600661100d565b60ff168160ff161015610af457610ac687828387610cc5565b15610add5781610ad581610fd5565b925050610ae2565b610af4565b80610aec81610fb6565b915050610aa2565b5060ff841615801590610b09575060ff851615155b156109dc576000610b1b60018661100d565b90506000610b2a60018861100d565b90505b610b3988838388610cc5565b15610b505782610b4881610fd5565b935050610b55565b610b8a565b60ff82161580610b66575060ff8116155b610b8a5781610b7481611026565b9250508080610b8290611026565b915050610b2d565b50509050949350505050565b6000600160ff841615610c31576000610bb060018661100d565b90506000610bbf876001610fee565b90505b60078160ff161015610c2e57610bda88838388610cc5565b15610bf15782610be981610fd5565b935050610bf6565b610c2e565b60ff82161580610c0a575060068160ff1610155b610c2e5781610c1881611026565b9250508080610c2690610fb6565b915050610bc2565b50505b60ff8516156109dc576000610c47856001610fee565b90506000610c5660018861100d565b90505b60068260ff16108015610c6a575060015b15610b8a57610c7b88838388610cc5565b15610b505782610c8a81610fd5565b93505060068260ff16101580610ca1575060ff8116155b610b8a5781610caf81610fb6565b9250508080610cbd90611026565b915050610c59565b600080600160008760ff16815260200190815260200160002060030190508260ff16818660ff1660068110610cfc57610cfc610f8a565b018560ff1660078110610d1157610d11610f8a565b602081049091015460ff601f9092166101000a90041614915050949350505050565b6040518060c001604052806006905b610d4a610daa565b815260200190600190039081610d425790505090565b8260068101928215610d9a579160200282015b82811115610d9a578251610d8a9083906007610dc8565b5091602001919060010190610d73565b50610da6929150610e57565b5090565b6040518060e001604052806007906020820280368337509192915050565b600183019183908215610e4b5791602002820160005b83821115610e1c57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610dde565b8015610e495782816101000a81549060ff0219169055600101602081600001049283019260010302610e1c565b505b50610da6929150610e6b565b80821115610da65760008155600101610e57565b80821115610da65760008155600101610e57565b600060208284031215610e9157600080fd5b81356001600160a01b0381168114610ea857600080fd5b9392505050565b803560ff81168114610ec057600080fd5b919050565b600060208284031215610ed757600080fd5b610ea882610eaf565b60008060408385031215610ef357600080fd5b610efc83610eaf565b9150610f0a60208401610eaf565b90509250929050565b610540810181836000805b6006811015610f6757825184835b6007811015610f4e57825160ff16825260209283019290910190600101610f2c565b50505060e0939093019260209290920191600101610f1e565b5050505092915050565b600060208284031215610f8357600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103610fcc57610fcc610fa0565b60010192915050565b600060018201610fe757610fe7610fa0565b5060010190565b60ff818116838216019081111561100757611007610fa0565b92915050565b60ff828116828216039081111561100757611007610fa0565b600060ff82168061103957611039610fa0565b600019019291505056fea2646970667358221220c1283337ae4a32c0cdeb6b7daa81c0d957649e9fa82a9988d5ca1c5bda980fe564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "challenge(address)": {
        "details": "opponent will go firstgame id is increated each time a new game is createdseason is over when timer (soon to be added) is past",
        "params": {
          "opponent": "challened"
        }
      },
      "makeMove(uint8)": {
        "params": {
          "_column": "selected column for move"
        }
      },
      "makeMoveById(uint8,uint8)": {
        "params": {
          "_gameId": "id of game",
          "column": "selected column for move"
        }
      }
    },
    "stateVariables": {
      "gameId": {
        "details": "Initialised at 1 because it makes the first transaction slightly cheaper."
      },
      "getGame": {
        "details": "This automatically generates a getter for us, which will return `Game.player1`, `Game.player2`, `Game.moves`, and `Game.finished` (the arrays are skipped)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "GameOver()": [
        {
          "notice": "revert if game has been completed"
        }
      ],
      "InvalidSelection()": [
        {
          "notice": "revert if column choice is invalid"
        }
      ],
      "NotYourTurn()": [
        {
          "notice": "revert if caller isn't current team"
        }
      ]
    },
    "events": {
      "GameCreated(uint256,address,address)": {
        "notice": "emiited when game is created"
      },
      "GameFinished(uint256,address)": {
        "notice": "emitted when game is complete"
      },
      "TurnTaken(uint256,address,uint8)": {
        "notice": "emitted after turn is successfully taken"
      }
    },
    "kind": "user",
    "methods": {
      "challenge(address)": {
        "notice": "challenge an address to a game of connect four"
      },
      "gameId()": {
        "notice": "Used as a counter for the next game index."
      },
      "getGame(uint256)": {
        "notice": "An indexed list of games"
      },
      "getGameIdFromAddress(address)": {
        "notice": "An index of address to gameId"
      },
      "makeMove(uint8)": {
        "notice": "caller plays a turn in their current game"
      },
      "makeMoveById(uint8,uint8)": {
        "notice": "current team plays a turn"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/ConnectFour/ConnectFour.sol:ConnectFour",
        "label": "gameId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 59,
        "contract": "contracts/ConnectFour/ConnectFour.sol:ConnectFour",
        "label": "getGame",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Game)50_storage)"
      },
      {
        "astId": 64,
        "contract": "contracts/ConnectFour/ConnectFour.sol:ConnectFour",
        "label": "getGameIdFromAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint8)7_storage)6_storage": {
        "base": "t_array(t_uint8)7_storage",
        "encoding": "inplace",
        "label": "uint8[7][6]",
        "numberOfBytes": "192"
      },
      "t_array(t_uint8)7_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[7]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Game)50_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ConnectFour.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)50_storage"
      },
      "t_struct(Game)50_storage": {
        "encoding": "inplace",
        "label": "struct ConnectFour.Game",
        "members": [
          {
            "astId": 37,
            "contract": "contracts/ConnectFour/ConnectFour.sol:ConnectFour",
            "label": "teamOne",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 39,
            "contract": "contracts/ConnectFour/ConnectFour.sol:ConnectFour",
            "label": "teamTwo",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 41,
            "contract": "contracts/ConnectFour/ConnectFour.sol:ConnectFour",
            "label": "winner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 43,
            "contract": "contracts/ConnectFour/ConnectFour.sol:ConnectFour",
            "label": "turn",
            "offset": 20,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 49,
            "contract": "contracts/ConnectFour/ConnectFour.sol:ConnectFour",
            "label": "board",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint8)7_storage)6_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}