/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [],
    name: "abandonCurrentGame",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[7][6]",
        name: "",
        type: "uint8[7][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getGameIdFromAddress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "columnIndex",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_columnNumber",
        type: "uint256",
      },
    ],
    name: "move",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600160005534801561001557600080fd5b506111de806100256000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806387cb15f71161005b57806387cb15f7146100f05780639b33b42914610103578063a2f77bcc14610123578063d7c81b55146101a157600080fd5b806310572ee01461008d5780635e24b0f1146100c05780636560e01c146100d557806372fb9703146100dd575b600080fd5b6100ad61009b366004610fd1565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b6100d36100ce366004611017565b6101aa565b005b6100d361057e565b6100d36100eb366004610fd1565b6106b3565b6100d36100fe36600461104a565b6108cc565b610116610111366004611063565b610938565b6040516100b7919061107e565b61016e61013136600461104a565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016100b7565b6100ad60005481565b60ff82166000818152600160205260409020600201546001600160a01b0316156101e75760405163df469ccb60e01b815260040160405180910390fd5b8160068160ff16111561020d57604051631efccef760e11b815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b9004161561023f576001610242565b60025b6002840154909150600160a01b9004600116156102695782546001600160a01b0316610278565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b0316146102a957604051631cc191eb60e31b815260040160405180910390fd5b60005b60078160ff1610156103545760058160ff1611156102dd57604051631efccef760e11b815260040160405180910390fd5b6000846003018260ff16600681106102f7576102f76110dc565b018860ff166007811061030c5761030c6110dc565b602081049091015460ff601f9092166101000a90041690506000819003610341578161033781611108565b9250935050610354565b508061034c81611108565b9150506102ac565b5080836003018360ff166006811061036e5761036e6110dc565b018760ff1660078110610383576103836110dc565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b90049091169060146103c483611108565b82546101009290920a60ff818102199093169183160217909155604080513381528983166020820152918a1692507fa6f41f711ea470b4b237d1b3e43b201e53517677308ae067a273fb1948ddbf0c910160405180910390a2610429878784846109d7565b1561057557600283018054336001600160a01b03199091168117918290556040805160a08101825286546001600160a01b039081168252600188015416602082015280820192909252600160a01b90920460ff166060820152815160c0810190925261053991859060808301906003830160066000835b82821015610503576040805160e08101918290529085840190600790826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116104c15790505050505050815260200190600101906104a0565b5050509152505080516001600160a01b039081166000908152600260209081526040808320839055930151909116815290812055565b6040805160ff891681523360208201527fb7f35e624e036288272fbf3342c09219261ff29fdddd826989b289134e9ae535910160405180910390a15b50505050505050565b33600090815260026020526040812054908190036105dc5760405162461bcd60e51b81526020600482015260166024820152752737ba1031bab93932b73a363c90383630bcb4b7339760511b60448201526064015b60405180910390fd5b6000818152600160208181526040808420815160a08101835281546001600160a01b03908116825294820154851693810193909352600281015493841683830152600160a01b90930460ff166060830152805160c081019091526106b0939192916080840191906003840190600690835b82821015610503576040805160e08101918290529085840190600790826000855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161066e57905050505050508152602001906001019061064d565b50565b806001600160a01b03811633036106c957600080fd5b33600090815260026020526040902054156107195760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90383630bcb4b7339760811b60448201526064016105d3565b6001600160a01b0382166000908152600260205260409020541561077f5760405162461bcd60e51b815260206004820152601c60248201527f4f70706f6e656e7420697320616c726561647920706c6179696e672e0000000060448201526064016105d3565b610787610e85565b6040805160a0810182523381526001600160a01b038581166020808401918252600084860181815260608601828152608087018981528354845260019485905297909220865181549087166001600160a01b03199182161782559451938101805494871694909516939093179093559151600282018054935160ff16600160a01b026001600160a81b03199094169190941617919091179091559151909182916108379060038301906006610eb2565b50506000805483516001600160a01b0390811683526002602090815260408085208490559086015190911683529091205550600054604080519182523360208301526001600160a01b03861682820152517f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e9181900360600190a16000805490806108c183611127565b919050555050505050565b33600090815260026020526040812054908190036109255760405162461bcd60e51b81526020600482015260166024820152752737ba1031bab93932b73a363c90383630bcb4b7339760511b60448201526064016105d3565b610934816100ce600185611140565b5050565b610940610e85565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b828210156109cc576040805160e08101918290529085840190600790826000855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161098a579050505050505081526020019060010190610969565b505050509050919050565b6000806109e686868686610a77565b9050806004036109fa576001915050610a6f565b6000610a0887878787610b37565b905080600403610a1d57600192505050610a6f565b6000610a2b88888888610be2565b905080600403610a415760019350505050610a6f565b6000610a4f89898989610ce8565b905080600403610a66576001945050505050610a6f565b60009450505050505b949350505050565b6000600181610a868683611159565b90505b60078160ff161015610acf57610aa187868387610e17565b15610ab85781610ab081611127565b925050610abd565b610acf565b80610ac781611108565b915050610a89565b5060ff851615610b2e576000610ae6600187611172565b90505b610af587868387610e17565b15610b0c5781610b0481611127565b925050610b11565b610b2c565b60ff811615610b2c5780610b248161118b565b915050610ae9565b505b95945050505050565b6000600181610b468583611159565b90505b60068160ff161015610b8f57610b6187828887610e17565b15610b785781610b7081611127565b925050610b7d565b610b8f565b80610b8781611108565b915050610b49565b5060ff841615610b2e576000610ba6600186611172565b90505b610bb587828887610e17565b15610b0c5781610bc481611127565b92505060ff811615610b2c5780610bda8161118b565b915050610ba9565b6000600181610bf18583611159565b90505b610bff856006611172565b60ff168160ff161015610c4657610c1887828387610e17565b15610c2f5781610c2781611127565b925050610c34565b610c46565b80610c3e81611108565b915050610bf4565b5060ff841615801590610c5b575060ff851615155b15610b2e576000610c6d600186611172565b90506000610c7c600188611172565b90505b610c8b88838388610e17565b15610ca25782610c9a81611127565b935050610ca7565b610cdc565b60ff82161580610cb8575060ff8116155b610cdc5781610cc68161118b565b9250508080610cd49061118b565b915050610c7f565b50509050949350505050565b6000600160ff841615610d83576000610d02600186611172565b90506000610d11876001611159565b90505b60078160ff161015610d8057610d2c88838388610e17565b15610d435782610d3b81611127565b935050610d48565b610d80565b60ff82161580610d5c575060068160ff1610155b610d805781610d6a8161118b565b9250508080610d7890611108565b915050610d14565b50505b60ff851615610b2e576000610d99856001611159565b90506000610da8600188611172565b90505b60068260ff16108015610dbc575060015b15610cdc57610dcd88838388610e17565b15610ca25782610ddc81611127565b93505060068260ff16101580610df3575060ff8116155b610cdc5781610e0181611108565b9250508080610e0f9061118b565b915050610dab565b600080600160008760ff16815260200190815260200160002060030190508260ff16818660ff1660068110610e4e57610e4e6110dc565b018560ff1660078110610e6357610e636110dc565b602081049091015460ff601f9092166101000a90041614915050949350505050565b6040518060c001604052806006905b610e9c610efc565b815260200190600190039081610e945790505090565b8260068101928215610eec579160200282015b82811115610eec578251610edc9083906007610f1a565b5091602001919060010190610ec5565b50610ef8929150610fa9565b5090565b6040518060e001604052806007906020820280368337509192915050565b600183019183908215610f9d5791602002820160005b83821115610f6e57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610f30565b8015610f9b5782816101000a81549060ff0219169055600101602081600001049283019260010302610f6e565b505b50610ef8929150610fbd565b80821115610ef85760008155600101610fa9565b80821115610ef85760008155600101610fa9565b600060208284031215610fe357600080fd5b81356001600160a01b0381168114610ffa57600080fd5b9392505050565b803560ff8116811461101257600080fd5b919050565b6000806040838503121561102a57600080fd5b61103383611001565b915061104160208401611001565b90509250929050565b60006020828403121561105c57600080fd5b5035919050565b60006020828403121561107557600080fd5b610ffa82611001565b610540810181836000805b60068110156110d257825184835b60078110156110b957825160ff16825260209283019290910190600101611097565b50505060e0939093019260209290920191600101611089565b5050505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff810361111e5761111e6110f2565b60010192915050565b600060018201611139576111396110f2565b5060010190565b81810381811115611153576111536110f2565b92915050565b60ff8181168382160190811115611153576111536110f2565b60ff8281168282160390811115611153576111536110f2565b600060ff82168061119e5761119e6110f2565b600019019291505056fea2646970667358221220e40edc27dbcd66b561889c26d0ecaa32020323c2e57df96ed973000b8b8a05e064736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
